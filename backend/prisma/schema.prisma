generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  shadowDatabaseUrl = env("POSTGRES_PRISMA_SHADOW_URL")
}

model Newcomers {
  id               Int                @id @default(autoincrement())
  name             String
  middleName       String?            @map("middle_name")
  surname          String
  email            String             @unique
  mobile           String?
  jobTitle         String             @map("job_title")
  firstDay         DateTime           @map("first_day")
  externalId       String             @default(uuid()) @map("external_id")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  RelatedEmployees RelatedEmployees[]
  Equipments       Equipments[]
  Accesses         Accesses[]
  RelatedRequests  RelatedRequests[]
  CorporateInfo    CorporateInfo?

  @@map("newcomers")
}

model RelatedEmployees {
  id          String    @id @default(uuid())
  type        String?
  name        String?
  newcomersId Newcomers @relation(fields: [newcId], references: [id], onDelete: Cascade)
  newcId      Int       @map("newcomers_id")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("related_employees")
}

model Equipments {
  id            String    @id @default(uuid())
  type          String
  qty           Int
  comment       String?
  internalId    String    @map("internal_id")
  requestId     String?   @map("request_id")
  requestStatus String?   @map("request_status")
  newcomersId   Newcomers @relation(fields: [newcId], references: [id], onDelete: Cascade)
  newcId        Int       @map("newcomers_id")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("equipments")
}

model Accesses {
  id            String    @id @default(uuid())
  system        String
  role          String?
  comment       String?
  internalId    String    @map("internal_id")
  requestId     String?   @map("request_id")
  requestStatus String?   @map("request_status")
  newcomersId   Newcomers @relation(fields: [newcId], references: [id], onDelete: Cascade)
  newcId        Int       @map("newcomers_id")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("accesses")
}

model RelatedRequests {
  id            String       @id @default(uuid())
  type          RequestsType
  requestId     String?      @map("request_id")
  requestStatus String?      @map("request_status")
  title         String
  lastModified  DateTime
  newcomersId   Newcomers    @relation(fields: [newcId], references: [id], onDelete: Cascade)
  newcId        Int          @map("newcomers_id")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("related_requests")
}

model CorporateInfo {
  id             String    @id @default(uuid())
  nameEn         String    @map("name_en")
  corporateEmail String    @map("corporate_email")
  domain         String
  login          String
  newcomersId    Newcomers @relation(fields: [newcId], references: [id], onDelete: Cascade)
  newcId         Int       @unique @map("newcomers_id")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("corporate_info")
}

enum RequestsType {
  equipment
  accesses
  sec_check
  main
  other
}
